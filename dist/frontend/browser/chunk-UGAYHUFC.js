import{e as c,g as h,h as i,j as r,k as s,n as l,q as p,qa as u}from"./chunk-FJVZ6BR4.js";var m=(()=>{let o=class o{constructor(t){this.http=t,this.API_URL="http://localhost:8080/api",this.transaccionesSubject=new c([]),this.transacciones$=this.transaccionesSubject.asObservable(),this.cargarTransacciones()}obtenerTransacciones(){return this.http.get(`${this.API_URL}/transacciones`).pipe(s(t=>{console.log("Transacciones obtenidas:",t),this.transaccionesSubject.next(t)}),r(this.manejarError))}obtenerTransaccionesPorCuenta(t){return this.http.get(`${this.API_URL}/transacciones/cuenta/${t}`).pipe(s(e=>console.log("Transacciones de cuenta obtenidas:",e)),r(this.manejarError))}obtenerTransaccionPorId(t){return this.http.get(`${this.API_URL}/transacciones/${t}`).pipe(s(e=>console.log("Transacci\xF3n obtenida:",e)),r(this.manejarError))}obtenerTransaccionesPorTipo(t){return this.http.get(`${this.API_URL}/transacciones/tipo/${t}`).pipe(s(e=>console.log("Transacciones por tipo obtenidas:",e)),r(this.manejarError))}obtenerTransaccionesPorCuentaYTipo(t,e){return this.http.get(`${this.API_URL}/transacciones/cuenta/${t}/tipo/${e}`).pipe(s(a=>console.log("Transacciones de cuenta por tipo obtenidas:",a)),r(this.manejarError))}realizarDeposito(t){return this.http.post(`${this.API_URL}/transacciones/deposito`,t).pipe(s(e=>{console.log("Dep\xF3sito realizado:",e);let a=this.transaccionesSubject.value;this.transaccionesSubject.next([e,...a])}),r(this.manejarError))}realizarRetiro(t){return this.http.post(`${this.API_URL}/transacciones/retiro`,t).pipe(s(e=>{console.log("Retiro realizado:",e);let a=this.transaccionesSubject.value;this.transaccionesSubject.next([e,...a])}),r(this.manejarError))}obtenerEstadisticasTransacciones(t){return this.http.get(`${this.API_URL}/transacciones/estadisticas/cuenta/${t}`).pipe(i(e=>({totalDepositos:e[0],totalRetiros:e[1],totalTransacciones:e[2]})),s(e=>console.log("Estad\xEDsticas de transacciones obtenidas:",e)),r(this.manejarError))}obtenerTotalDepositos(t){return this.http.get(`${this.API_URL}/transacciones/depositos/cuenta/${t}`).pipe(s(e=>console.log("Total de dep\xF3sitos obtenido:",e)),r(this.manejarError))}obtenerTotalRetiros(t){return this.http.get(`${this.API_URL}/transacciones/retiros/cuenta/${t}`).pipe(s(e=>console.log("Total de retiros obtenido:",e)),r(this.manejarError))}obtenerTransaccionesRecientes(t=10){return this.http.get(`${this.API_URL}/transacciones/recientes?limit=${t}`).pipe(s(e=>console.log("Transacciones recientes obtenidas:",e)),r(this.manejarError))}obtenerEstadisticasGlobales(){return this.http.get(`${this.API_URL}/transacciones/estadisticas/globales`).pipe(i(t=>({totalDepositos:t[0],totalRetiros:t[1],totalTransacciones:t[2]})),s(t=>console.log("Estad\xEDsticas globales obtenidas:",t)),r(this.manejarError))}cargarTransacciones(){this.obtenerTransacciones().subscribe({error:t=>console.error("Error al cargar transacciones:",t)})}manejarError(t){let e="Ocurri\xF3 un error desconocido";return t.error instanceof ErrorEvent?e=`Error: ${t.error.message}`:(e=`C\xF3digo de error: ${t.status}
Mensaje: ${t.message}`,t.error&&t.error.message&&(e=t.error.message)),console.error("Error en TransaccionService:",e),h(()=>new Error(e))}getTransaccionesActuales(){return this.transaccionesSubject.value}actualizarTransacciones(t){this.transaccionesSubject.next(t)}filtrarTransaccionesPorTipo(t,e){return t.filter(a=>a.tipo===e)}filtrarTransaccionesPorCuenta(t,e){return t.filter(a=>a.cuentaId===e)}ordenarTransaccionesPorFecha(t){return t.sort((e,a)=>new Date(a.fechaTransaccion).getTime()-new Date(e.fechaTransaccion).getTime())}};o.\u0275fac=function(e){return new(e||o)(p(u))},o.\u0275prov=l({token:o,factory:o.\u0275fac,providedIn:"root"});let n=o;return n})();export{m as a};
